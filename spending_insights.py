# -*- coding: utf-8 -*-
"""spending insights.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d4K9EY5EcPVStEeeULttfyYd1CD8yCMB
"""

import pandas as pd

# Load the dataset (update the file path as necessary)
df = pd.read_csv('/content/bankstatements.csv')
# Display the first few rows to understand the data structure
df.head()

df.describe()

df.columns

print(len(df))

print(df.isnull().any().sum())

missing_columns = df.columns[df.isnull().any()]
print("Columns with missing values:", missing_columns)

# Save the new dataset to a CSV file
df_new.to_csv('/content/newstatement.csv', index=False)

# Load the new dataset
df_new_loaded = pd.read_csv('/content/newstatement.csv')

# Display the loaded dataset
print(df_new_loaded.head())

print(df_new_loaded.isnull().any().sum())

# Check for duplicate rows
print("Duplicate Rows:", df_new_loaded.duplicated().sum())

# Remove duplicate rows
df_new_no_duplicates = df_new_loaded.drop_duplicates()

# Display the cleaned dataset without duplicates
print(df_new_no_duplicates.head())

# Check how many duplicates are left
print("Remaining duplicate rows:", df_new_no_duplicates.duplicated().sum())

df_new_no_duplicates.to_csv('/no duplicatestatement.csv', index=False)

# Check data types of the columns
print(df_new_no_duplicates.dtypes)

# Convert 'Date' column to datetime using .loc to avoid the warning
df_new_no_duplicates.loc[:, 'date'] = pd.to_datetime(df_new_no_duplicates['date'])

# Verify the data types again
print(df_new_no_duplicates.dtypes)

# Save the cleaned dataset to a new CSV file
df_new_no_duplicates.to_csv('/content/df_new_no_duplicates.csv', index=False)

Total_spending = df_new_no_duplicates[df_new_no_duplicates['DrCr']=='Db']['amount'].sum()
print(Total_spending)

# Check unique values in 'DrCr' to confirm if 'Debit' exists
print(df_new_no_duplicates['DrCr'].unique())

# Convert 'date' column to datetime if it isn't already
df_new_no_duplicates['date'] = pd.to_datetime(df_new_no_duplicates['date'], errors='coerce')

# Now, create the 'Month_Year' and calculate total spending by month in one line
monthly_spending = df_new_no_duplicates[df_new_no_duplicates['DrCr'] == 'Db'].groupby(df_new_no_duplicates['date'].dt.to_period('M'))['amount'].sum()

# Display the result
print(monthly_spending)

import matplotlib.pyplot as plt

# Plot histogram of spending amounts
plt.figure(figsize=(10, 6))
plt.hist(df_new_no_duplicates[df_new_no_duplicates['DrCr'] == 'Db']['amount'], bins=30, color='blue', alpha=0.7)
plt.title('Spending Distribution')
plt.xlabel('Amount')
plt.ylabel('Frequency')
plt.show()

import matplotlib.pyplot as plt

# Set the spending range you want to focus on (e.g., from $0 to $500)
min_spending = 0
max_spending = 500

# Filter the data based on the spending range
filtered_data = df_new_no_duplicates[df_new_no_duplicates['DrCr'] == 'Db']['amount']
filtered_data = filtered_data[(filtered_data >= min_spending) & (filtered_data <= max_spending)]

# Plot histogram with custom bin size (e.g., 20 bins) for better resolution
plt.figure(figsize=(10, 6))
plt.hist(filtered_data, bins=20, color='blue', alpha=0.7)

# Set titles and labels
plt.title('Zoomed-In Spending Distribution ($0 to $500)')
plt.xlabel('Spending Amount ($)')
plt.ylabel('Frequency')

# Optional: Adjust x-axis limit for zooming effect
plt.xlim(min_spending, max_spending)

# Show the plot
plt.show()

# Ensure 'date' column is in datetime format
df_new_no_duplicates['date'] = pd.to_datetime(df_new_no_duplicates['date'])

# Filter 'Debit' transactions (instead of 'Db', use 'Debit')
monthly_spending = df_new_no_duplicates[df_new_no_duplicates['DrCr'] == 'Db'].groupby(df_new_no_duplicates['date'].dt.to_period('M'))['amount'].sum()

# Plot pie chart for spending distribution by month
plt.figure(figsize=(8, 8))
monthly_spending.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)

# Title and display the plot
plt.title('Spending Distribution by Month')
plt.ylabel('')  # Hide the 'ylabel' as it's unnecessary in a pie chart
plt.show()

import matplotlib.pyplot as plt

# Ensure the 'date' column is in datetime format (if not already)
df_new_no_duplicates['date'] = pd.to_datetime(df_new_no_duplicates['date'])

# Filter for 'Debit' transactions (spending)
debit_data = df_new_no_duplicates[df_new_no_duplicates['DrCr'] == 'Db']

# Group the data by Month and Year, and sum the spending in each month
monthly_spending = debit_data.groupby(debit_data['date'].dt.to_period('M'))['amount'].sum()

# Sort the months by the total spending in descending order and get the top 6 months
high_spending_months = monthly_spending.sort_values(ascending=False).head(6)

# Plot the pie chart for high spending months
plt.figure(figsize=(8, 8))
high_spending_months.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=plt.cm.Paired.colors)

# Title and display the plot
plt.title('High Spending Months (Top 6)')
plt.ylabel('')  # Hide the 'ylabel' as it's unnecessary in a pie chart
plt.show()